//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2023 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1beta1

import (
	json "encoding/json"
	fmtx "fmt"

	v1 "dies.dev/apis/meta/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	unstructured "k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"

	externalsecretsv1beta1 "github.com/servicebinding/mapping-externalsecrets/apis/thirdparty/externalsecrets/v1beta1"
)

var ExternalSecretBlank = (&ExternalSecretDie{}).DieFeed(externalsecretsv1beta1.ExternalSecret{})

type ExternalSecretDie struct {
	v1.FrozenObjectMeta
	mutable bool
	r       externalsecretsv1beta1.ExternalSecret
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ExternalSecretDie) DieImmutable(immutable bool) *ExternalSecretDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ExternalSecretDie) DieFeed(r externalsecretsv1beta1.ExternalSecret) *ExternalSecretDie {
	if d.mutable {
		d.FrozenObjectMeta = v1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ExternalSecretDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ExternalSecretDie) DieFeedPtr(r *externalsecretsv1beta1.ExternalSecret) *ExternalSecretDie {
	if r == nil {
		r = &externalsecretsv1beta1.ExternalSecret{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ExternalSecretDie) DieFeedRawExtension(raw runtime.RawExtension) *ExternalSecretDie {
	b, _ := json.Marshal(raw)
	r := externalsecretsv1beta1.ExternalSecret{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ExternalSecretDie) DieRelease() externalsecretsv1beta1.ExternalSecret {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ExternalSecretDie) DieReleasePtr() *externalsecretsv1beta1.ExternalSecret {
	r := d.DieRelease()
	return &r
}

// DieReleaseUnstructured returns the resource managed by the die as an unstructured object.
func (d *ExternalSecretDie) DieReleaseUnstructured() *unstructured.Unstructured {
	r := d.DieReleasePtr()
	u, _ := runtime.DefaultUnstructuredConverter.ToUnstructured(r)
	return &unstructured.Unstructured{
		Object: u,
	}
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ExternalSecretDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ExternalSecretDie) DieStamp(fn func(r *externalsecretsv1beta1.ExternalSecret)) *ExternalSecretDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ExternalSecretDie) DeepCopy() *ExternalSecretDie {
	r := *d.r.DeepCopy()
	return &ExternalSecretDie{
		FrozenObjectMeta: v1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

var _ runtime.Object = (*ExternalSecretDie)(nil)

func (d *ExternalSecretDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *ExternalSecretDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ExternalSecretDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ExternalSecretDie) UnmarshalJSON(b []byte) error {
	if d == ExternalSecretBlank {
		return fmtx.Errorf("cannot unmarshal into the blank die, create a copy first")
	}
	if !d.mutable {
		return fmtx.Errorf("cannot unmarshal into immutable dies, create a mutable version first")
	}
	r := &externalsecretsv1beta1.ExternalSecret{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (d *ExternalSecretDie) APIVersion(v string) *ExternalSecretDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecret) {
		r.APIVersion = v
	})
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (d *ExternalSecretDie) Kind(v string) *ExternalSecretDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecret) {
		r.Kind = v
	})
}

// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
func (d *ExternalSecretDie) MetadataDie(fn func(d *v1.ObjectMetaDie)) *ExternalSecretDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecret) {
		d := v1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

// SpecDie stamps the resource's spec field with a mutable die.
func (d *ExternalSecretDie) SpecDie(fn func(d *ExternalSecretSpecDie)) *ExternalSecretDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecret) {
		d := ExternalSecretSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

// StatusDie stamps the resource's status field with a mutable die.
func (d *ExternalSecretDie) StatusDie(fn func(d *ExternalSecretStatusDie)) *ExternalSecretDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecret) {
		d := ExternalSecretStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *ExternalSecretDie) Spec(v externalsecretsv1beta1.ExternalSecretSpec) *ExternalSecretDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecret) {
		r.Spec = v
	})
}

func (d *ExternalSecretDie) Status(v externalsecretsv1beta1.ExternalSecretStatus) *ExternalSecretDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecret) {
		r.Status = v
	})
}

var ExternalSecretSpecBlank = (&ExternalSecretSpecDie{}).DieFeed(externalsecretsv1beta1.ExternalSecretSpec{})

type ExternalSecretSpecDie struct {
	mutable bool
	r       externalsecretsv1beta1.ExternalSecretSpec
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ExternalSecretSpecDie) DieImmutable(immutable bool) *ExternalSecretSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ExternalSecretSpecDie) DieFeed(r externalsecretsv1beta1.ExternalSecretSpec) *ExternalSecretSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ExternalSecretSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ExternalSecretSpecDie) DieFeedPtr(r *externalsecretsv1beta1.ExternalSecretSpec) *ExternalSecretSpecDie {
	if r == nil {
		r = &externalsecretsv1beta1.ExternalSecretSpec{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ExternalSecretSpecDie) DieFeedRawExtension(raw runtime.RawExtension) *ExternalSecretSpecDie {
	b, _ := json.Marshal(raw)
	r := externalsecretsv1beta1.ExternalSecretSpec{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ExternalSecretSpecDie) DieRelease() externalsecretsv1beta1.ExternalSecretSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ExternalSecretSpecDie) DieReleasePtr() *externalsecretsv1beta1.ExternalSecretSpec {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ExternalSecretSpecDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ExternalSecretSpecDie) DieStamp(fn func(r *externalsecretsv1beta1.ExternalSecretSpec)) *ExternalSecretSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ExternalSecretSpecDie) DeepCopy() *ExternalSecretSpecDie {
	r := *d.r.DeepCopy()
	return &ExternalSecretSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ExternalSecretSpecDie) SecretStoreRef(v externalsecretsv1beta1.SecretStoreRef) *ExternalSecretSpecDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecretSpec) {
		r.SecretStoreRef = v
	})
}

func (d *ExternalSecretSpecDie) Target(v externalsecretsv1beta1.ExternalSecretTarget) *ExternalSecretSpecDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecretSpec) {
		r.Target = v
	})
}

// RefreshInterval is the amount of time before the values are read again from the SecretStore provider Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h" May be set to zero to fetch and create it once. Defaults to 1h.
func (d *ExternalSecretSpecDie) RefreshInterval(v *metav1.Duration) *ExternalSecretSpecDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecretSpec) {
		r.RefreshInterval = v
	})
}

// Data defines the connection between the Kubernetes Secret keys and the Provider data
func (d *ExternalSecretSpecDie) Data(v ...externalsecretsv1beta1.ExternalSecretData) *ExternalSecretSpecDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecretSpec) {
		r.Data = v
	})
}

// DataFrom is used to fetch all properties from a specific Provider data If multiple entries are specified, the Secret keys are merged in the specified order
func (d *ExternalSecretSpecDie) DataFrom(v ...externalsecretsv1beta1.ExternalSecretDataFromRemoteRef) *ExternalSecretSpecDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecretSpec) {
		r.DataFrom = v
	})
}

var ExternalSecretStatusBlank = (&ExternalSecretStatusDie{}).DieFeed(externalsecretsv1beta1.ExternalSecretStatus{})

type ExternalSecretStatusDie struct {
	mutable bool
	r       externalsecretsv1beta1.ExternalSecretStatus
}

// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
func (d *ExternalSecretStatusDie) DieImmutable(immutable bool) *ExternalSecretStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

// DieFeed returns a new die with the provided resource.
func (d *ExternalSecretStatusDie) DieFeed(r externalsecretsv1beta1.ExternalSecretStatus) *ExternalSecretStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ExternalSecretStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
func (d *ExternalSecretStatusDie) DieFeedPtr(r *externalsecretsv1beta1.ExternalSecretStatus) *ExternalSecretStatusDie {
	if r == nil {
		r = &externalsecretsv1beta1.ExternalSecretStatus{}
	}
	return d.DieFeed(*r)
}

// DieFeedRawExtension returns the resource managed by the die as an raw extension.
func (d *ExternalSecretStatusDie) DieFeedRawExtension(raw runtime.RawExtension) *ExternalSecretStatusDie {
	b, _ := json.Marshal(raw)
	r := externalsecretsv1beta1.ExternalSecretStatus{}
	_ = json.Unmarshal(b, &r)
	return d.DieFeed(r)
}

// DieRelease returns the resource managed by the die.
func (d *ExternalSecretStatusDie) DieRelease() externalsecretsv1beta1.ExternalSecretStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

// DieReleasePtr returns a pointer to the resource managed by the die.
func (d *ExternalSecretStatusDie) DieReleasePtr() *externalsecretsv1beta1.ExternalSecretStatus {
	r := d.DieRelease()
	return &r
}

// DieReleaseRawExtension returns the resource managed by the die as an raw extension.
func (d *ExternalSecretStatusDie) DieReleaseRawExtension() runtime.RawExtension {
	r := d.DieReleasePtr()
	b, _ := json.Marshal(r)
	raw := runtime.RawExtension{}
	_ = json.Unmarshal(b, &raw)
	return raw
}

// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
func (d *ExternalSecretStatusDie) DieStamp(fn func(r *externalsecretsv1beta1.ExternalSecretStatus)) *ExternalSecretStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
func (d *ExternalSecretStatusDie) DeepCopy() *ExternalSecretStatusDie {
	r := *d.r.DeepCopy()
	return &ExternalSecretStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// refreshTime is the time and date the external secret was fetched and the target secret updated
func (d *ExternalSecretStatusDie) RefreshTime(v metav1.Time) *ExternalSecretStatusDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecretStatus) {
		r.RefreshTime = v
	})
}

// SyncedResourceVersion keeps track of the last synced version
func (d *ExternalSecretStatusDie) SyncedResourceVersion(v string) *ExternalSecretStatusDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecretStatus) {
		r.SyncedResourceVersion = v
	})
}

func (d *ExternalSecretStatusDie) Conditions(v ...externalsecretsv1beta1.ExternalSecretStatusCondition) *ExternalSecretStatusDie {
	return d.DieStamp(func(r *externalsecretsv1beta1.ExternalSecretStatus) {
		r.Conditions = v
	})
}
